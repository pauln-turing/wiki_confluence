You are an expert in managing API connections. We have some APIs that reside within an interface. Those APIs have input and output parameters. I want you to determine the connections between those APIs through their parameters either explicitly or implicitly. Your task is to ensure that all API connections depict correct relations that are conveyed through the db schema or the API documentation. You will be provided with the API documentation and the db schema. Your goal is to identify and describe the relationships between the APIs based on their parameters and the data they exchange but you have to adhere to the json format provided below where you add all the inputs and outputs of an api, then determine its connections implicitly or explicitly with others. Add only the inputs and outputs of the APIs that are related to the connections. Use the db schema to replace filters by the actual parameters that are used in the APIs.

# DB schema:
CREATE TABLE `companies` (
  `company_id` integer PRIMARY KEY,
  `name` varchar(255),
  `industry` varchar(100),
  `address` varchar(255),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `users` (
  `user_id` integer PRIMARY KEY,
  `first_name` varchar(255),
  `last_name` varchar(255),
  `email` varchar(320) UNIQUE,
  `role` enum(end_user,agent,manager,admin),
  `status` enum(active,inactive),
  `timezone` varchar(50),
  `company_id` integer,
  `department_id` integer COMMENT 'Only for agents',
  `password_hash` varchar(255),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `departments` (
  `department_id` integer PRIMARY KEY,
  `name` varchar(255),
  `manager_id` integer,
  `company_id` integer,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `categories` (
  `category_id` integer PRIMARY KEY,
  `name` varchar(100),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `subcategories` (
  `subcategory_id` integer PRIMARY KEY,
  `category_id` integer,
  `name` varchar(100),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incidents` (
  `incident_id` integer PRIMARY KEY,
  `title` varchar(255),
  `description` text,
  `category_id` integer,
  `subcategory_id` integer,
  `reported_by` integer NOT NULL,
  `assigned_to` integer,
  `department_id` integer,
  `company_id` integer,
  `status` enum(open,in_progress,resolved,closed),
  `priority` enum(low,medium,high,critical),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_history` (
  `incident_history_id` integer PRIMARY KEY,
  `incident_id` integer,
  `changed_by` integer,
  `incident_values` jsonb,
  `task_values` jsonb,
  `changed_at` timestamp
);

CREATE TABLE `incident_comments` (
  `incident_comment_id` integer PRIMARY KEY,
  `incident_id` integer,
  `user_id` integer,
  `comment_text` text,
  `is_public` boolean,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_attachments` (
  `incident_attachment_id` integer PRIMARY KEY,
  `incident_id` integer,
  `uploaded_by` integer,
  `file_name` varchar(500),
  `file_url` varchar(500),
  `uploaded_at` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `tasks` (
  `task_id` integer PRIMARY KEY,
  `incident_id` integer,
  `description` text,
  `assigned_to` integer,
  `status` enum(todo,in_progress,blocked,done,cancelled),
  `priority` enum(low,medium,high,critical),
  `due_date` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `change_requests` (
  `change_request_id` integer PRIMARY KEY,
  `incident_id` integer COMMENT 'Linked incident if applicable',
  `assigned_to` integer NOT NULL,
  `approved_by` integer,
  `description` varchar(255),
  `status` enum(draft,submitted,approved,rejected,in_progress,implemented,closed),
  `priority` enum(low,medium,high,critical),
  `risk_level` enum(low,medium,high),
  `affected_scope` jsonb,
  `scheduled_start` timestamp,
  `scheduled_end` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `sla_policies` (
  `sla_id` integer PRIMARY KEY,
  `name` varchar(100),
  `priority` enum(low,medium,high,critical),
  `category_id` integer,
  `response_time` integer COMMENT 'in minutes',
  `resolve_time` integer COMMENT 'in minutes',
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_sla` (
  `incident_sla_id` integer PRIMARY KEY,
  `incident_id` integer,
  `sla_id` integer,
  `response_due` timestamp,
  `resolve_due` timestamp,
  `breached` boolean,
  `status` enum(Pending,Completed,Cancelled),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `knowledge_base` (
  `knowledge_base_id` integer PRIMARY KEY,
  `description` varchar(255),
  `created_by` integer,
  `category_id` integer,
  `subcategory_id` integer,
  `company_id` integer,
  `department_id` integer,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_knowledge` (
  `incident_id` integer,
  `knowledge_base_id` integer,
  `created_at` timestamp
);

CREATE TABLE `surveys` (
  `survey_id` integer PRIMARY KEY,
  `incident_id` integer,
  `user_id` integer,
  `rating` integer,
  `submitted_at` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

ALTER TABLE `users` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `departments` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `users` ADD FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`);

ALTER TABLE `departments` ADD FOREIGN KEY (`manager_id`) REFERENCES `users` (`user_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`);

ALTER TABLE `subcategories` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`subcategory_id`) REFERENCES `subcategories` (`subcategory_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`subcategory_id`) REFERENCES `subcategories` (`subcategory_id`);

ALTER TABLE `sla_policies` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`reported_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`assigned_to`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_history` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_history` ADD FOREIGN KEY (`changed_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_comments` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_comments` ADD FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_attachments` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_attachments` ADD FOREIGN KEY (`uploaded_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `tasks` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `tasks` ADD FOREIGN KEY (`assigned_to`) REFERENCES `users` (`user_id`);

ALTER TABLE `change_requests` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `change_requests` ADD FOREIGN KEY (`assigned_to`) REFERENCES `users` (`user_id`);

ALTER TABLE `change_requests` ADD FOREIGN KEY (`approved_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_sla` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_sla` ADD FOREIGN KEY (`sla_id`) REFERENCES `sla_policies` (`sla_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`created_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_knowledge` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_knowledge` ADD FOREIGN KEY (`knowledge_base_id`) REFERENCES `knowledge_base` (`knowledge_base_id`);

ALTER TABLE `surveys` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `surveys` ADD FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`);

ALTER TABLE `sla_policies` ADD FOREIGN KEY (`name`) REFERENCES `sla_policies` (`category_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`created_by`) REFERENCES `knowledge_base` (`category_id`);


# API documentation:
Interface 1 
API Name
Signature
Returns
GET / READ (12 API - 50%)
GetCompanyByName
GetCompanyByName(name)
Company
SearchUsers
SearchUsers(filters: id, name,...)
List[User]
SearchDepartments
SearchDepartments(filters: id, name,...)
List[Department]
GetIncident
GetIncident(incident_id)
Incident
SearchIncidents
SearchIncidents(filters: id, name,...)
List[Incident]
GetIncidentComments
GetIncidentComments(incident_id)
List[Comment]
GetIncidentTasks
GetIncidentTasks(incident_id)
List[Task]
SearchSurveys
SearchSurveys(filters: id, name,...)
List[Survey]
SearchChangeRequests
SearchChangeRequests(filters: id, name,...)
List[ChangeRequest]
GetCategoryByName
GetCategoryByName(name)
Category
SearchSubcategories
SearchSubcategories(filters: id, name,...)
List[Subcategory]
SearchKBArticles
SearchKBArticles(filters: id, name,...)
List[KnowledgeBase]
CREATE / UPDATE / DELETE (12 API - 50%)
CreateUser
CreateUser(first_name, last_name, email, role, timezone, company_id, department_id, password)
{"user_id": str}
LinkIncidentToKB
LinkIncidentToKB(incident_id, knowledge_base_id)
{"success": bool}
UpdateKBArticle
UpdateKBArticle(knowledge_base_id, description)
{"knowledge_base_id": str}
CreateIncident
CreateIncident(title, description, category_id, subcategory_id, reported_by, company_id, department_id, priority)
{"incident_id": str}
AddIncidentComment
AddIncidentComment(incident_id, user_id, comment_text, is_public)
{"incident_comment_id": str}
CreateIncidentTask
CreateIncidentTask(incident_id, description, assigned_to, priority, due_date)
{"task_id": str}
UpdateIncident
UpdateIncident(incident_id, title, description, category_id, subcategory_id, assigned_to, department_id, status, priority)
{"incident_id": str}
UpdateTask
UpdateTask(task_id, description, assigned_to, status, priority, due_date)
{"task_id": str}
RegisterChangeRequest
RegisterChangeRequest(incident_id, description, priority, risk_level, scheduled_start, scheduled_end, assigned_to)
{"change_request_id": str}
LogIncidentChange
LogIncidentChange(incident_id, changed_by)
{"incident_history_id": str}
UpdateUserProfile
UpdateUserProfile(user_id, first_name, last_name, email, role, timezone, status, password)
{"user_id": str}
UpdateChangeRequest
UpdateChangeRequest(incident_id, description, priority, risk_level, scheduled_start, scheduled_end, assigned_to)
{"change_request_id": str}



# Please provide the API connections in the following JSON format:
{
    "APIs": {
        "getcompany": {
            "inputs": [
                {
                    "name": "company_id",
                    "type": "string",
                    "required": true
                }
            ],
            "outputs": [
                {
                    "name": "company_name",
                    "type": "string"
                },
                {
                    "name": "company_address",
                    "type": "string"
                },
                {
                    "name": "company_id",
                    "type": "string"
                }
            ]
        },
        "getUser": {
            "inputs": [
                {
                    "name": "user_id",
                    "type": "string",
                    "required": true
                },
                {
                    "name": "company_id",
                    "type": "string",
                    "required": true
                }
            ],
            "outputs": [
                {
                    "name": "user_name",
                    "type": "string"
                },
                {
                    "name": "company_id",
                    "type": "string"
                }
            ]
        }
    },
    "edges": [
        {
            "from": "getUser",
            "to": "getcompany",
            "connections": {
                "output": "company_id",
                "input": "company_id"
            },
            "explicit": false
        },
        {
            "from": "getcompany",
            "to": "getUser",
            "connections": {
                "output": "company_id",
                "input": "company_id"
            },
            "explicit": true
        }
    ]
}

