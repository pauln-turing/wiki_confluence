
You are a policy creation expert. I will provide you with a set of requirements and guidelines for creating a policy. Your task is to generate a comprehensive policy document for a reinforcement learning agent that interacts with a simulated database through the means of a collection of APIs (actions). The policy should ensure that the agent adheres to the specified requirements while interacting with the database. The idea is that the policy includes the necessary permissions and restrictions for the agent to operate effectively within the defined environment. I am going to give you the db schema and the APIs documentation that will help you understand the context in which the policy will be applied. Also, I will provide you examples of policy documents that you can use as a reference for creating the new policy.

# Here are some rules:
1. The policy includes explicit and implicit instructions for the agent to follow.
2. The policy is structured in natural language without referring to backend implementation details related to the APIs or the DB schema technically.
3. The policy may include actions that the agent must take before or after a particular API call. For example, the agent may need to check that the user has the privileges to perform a certain action (use the API) by executing other API call. Or the agent may need to check that the data it is about to write to the database is not present in the database by utilizing an API if there are APIs that supports this. 
4. The policy should be comprehensive and cover all necessary aspects of the agent's interaction within the database.
5. The policy should be written in a way that is easy to understand and follow for the agent.
6. The APIs provided are the only means through which the agent can interact with the database. The agent cannot directly access the database or perform any actions outside of the provided APIs. So, take care to revolve the policy around the APIs and the DB schema context related to those APIs meaning that the policy should not include any actions that are not supported by the APIs even if it is in the DB schema.
7. The policy should not resort to the human agent even if it is in the example policy documents. The agent should be able to operate independently without human intervention.
8. The policy should emphasize that the agent must ask users for information rather than making assumptions or generating information independently.
9. The policy should not mention any api parameter or name within the API documentation explicitly.



# DB schema:
CREATE TABLE `companies` (
  `company_id` integer PRIMARY KEY,
  `name` varchar(255),
  `industry` varchar(100),
  `address` varchar(255),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `users` (
  `user_id` integer PRIMARY KEY,
  `first_name` varchar(255),
  `last_name` varchar(255),
  `email` varchar(320) UNIQUE,
  `role` enum(end_user,agent,manager,admin),
  `status` enum(active,inactive),
  `timezone` varchar(50),
  `company_id` integer,
  `department_id` integer COMMENT 'Only for agents',
  `password_hash` varchar(255),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `departments` (
  `department_id` integer PRIMARY KEY,
  `name` varchar(255),
  `manager_id` integer,
  `company_id` integer,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `categories` (
  `category_id` integer PRIMARY KEY,
  `name` varchar(100),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `subcategories` (
  `subcategory_id` integer PRIMARY KEY,
  `category_id` integer,
  `name` varchar(100),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incidents` (
  `incident_id` integer PRIMARY KEY,
  `title` varchar(255),
  `description` text,
  `category_id` integer,
  `subcategory_id` integer,
  `reported_by` integer NOT NULL,
  `assigned_to` integer,
  `department_id` integer,
  `company_id` integer,
  `status` enum(open,in_progress,resolved,closed),
  `priority` enum(low,medium,high,critical),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_history` (
  `incident_history_id` integer PRIMARY KEY,
  `incident_id` integer,
  `changed_by` integer,
  `incident_values` jsonb,
  `task_values` jsonb,
  `changed_at` timestamp
);

CREATE TABLE `incident_comments` (
  `incident_comment_id` integer PRIMARY KEY,
  `incident_id` integer,
  `user_id` integer,
  `comment_text` text,
  `is_public` boolean,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_attachments` (
  `incident_attachment_id` integer PRIMARY KEY,
  `incident_id` integer,
  `uploaded_by` integer,
  `file_name` varchar(500),
  `file_url` varchar(500),
  `uploaded_at` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `tasks` (
  `task_id` integer PRIMARY KEY,
  `incident_id` integer,
  `description` text,
  `assigned_to` integer,
  `status` enum(todo,in_progress,blocked,done,cancelled),
  `priority` enum(low,medium,high,critical),
  `due_date` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `change_requests` (
  `change_request_id` integer PRIMARY KEY,
  `incident_id` integer COMMENT 'Linked incident if applicable',
  `assigned_to` integer NOT NULL,
  `approved_by` integer,
  `description` varchar(255),
  `status` enum(draft,submitted,approved,rejected,in_progress,implemented,closed),
  `priority` enum(low,medium,high,critical),
  `risk_level` enum(low,medium,high),
  `affected_scope` jsonb,
  `scheduled_start` timestamp,
  `scheduled_end` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `sla_policies` (
  `sla_id` integer PRIMARY KEY,
  `name` varchar(100),
  `priority` enum(low,medium,high,critical),
  `category_id` integer,
  `response_time` integer COMMENT 'in minutes',
  `resolve_time` integer COMMENT 'in minutes',
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_sla` (
  `incident_sla_id` integer PRIMARY KEY,
  `incident_id` integer,
  `sla_id` integer,
  `response_due` timestamp,
  `resolve_due` timestamp,
  `breached` boolean,
  `status` enum(Pending,Completed,Cancelled),
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `knowledge_base` (
  `knowledge_base_id` integer PRIMARY KEY,
  `description` varchar(255),
  `created_by` integer,
  `category_id` integer,
  `subcategory_id` integer,
  `company_id` integer,
  `department_id` integer,
  `created_at` timestamp,
  `updated_at` timestamp
);

CREATE TABLE `incident_knowledge` (
  `incident_id` integer,
  `knowledge_base_id` integer,
  `created_at` timestamp
);

CREATE TABLE `surveys` (
  `survey_id` integer PRIMARY KEY,
  `incident_id` integer,
  `user_id` integer,
  `rating` integer,
  `submitted_at` timestamp,
  `created_at` timestamp,
  `updated_at` timestamp
);

ALTER TABLE `users` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `departments` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`);

ALTER TABLE `users` ADD FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`);

ALTER TABLE `departments` ADD FOREIGN KEY (`manager_id`) REFERENCES `users` (`user_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`);

ALTER TABLE `subcategories` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`subcategory_id`) REFERENCES `subcategories` (`subcategory_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`subcategory_id`) REFERENCES `subcategories` (`subcategory_id`);

ALTER TABLE `sla_policies` ADD FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`reported_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incidents` ADD FOREIGN KEY (`assigned_to`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_history` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_history` ADD FOREIGN KEY (`changed_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_comments` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_comments` ADD FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_attachments` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_attachments` ADD FOREIGN KEY (`uploaded_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `tasks` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `tasks` ADD FOREIGN KEY (`assigned_to`) REFERENCES `users` (`user_id`);

ALTER TABLE `change_requests` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `change_requests` ADD FOREIGN KEY (`assigned_to`) REFERENCES `users` (`user_id`);

ALTER TABLE `change_requests` ADD FOREIGN KEY (`approved_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_sla` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_sla` ADD FOREIGN KEY (`sla_id`) REFERENCES `sla_policies` (`sla_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`created_by`) REFERENCES `users` (`user_id`);

ALTER TABLE `incident_knowledge` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `incident_knowledge` ADD FOREIGN KEY (`knowledge_base_id`) REFERENCES `knowledge_base` (`knowledge_base_id`);

ALTER TABLE `surveys` ADD FOREIGN KEY (`incident_id`) REFERENCES `incidents` (`incident_id`);

ALTER TABLE `surveys` ADD FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`);

ALTER TABLE `sla_policies` ADD FOREIGN KEY (`name`) REFERENCES `sla_policies` (`category_id`);

ALTER TABLE `knowledge_base` ADD FOREIGN KEY (`created_by`) REFERENCES `knowledge_base` (`category_id`);

# API documentation:
Interface 5
APIs:
API Name
Signature
Returns
GET / READ (13 APIs - 54%)
ListUsersByFilters
ListUsersByFilters(filters: id, name,...)
List[User]
ListCompaniesByFilters
ListCompaniesByFilters(filters: id, name,...)
List[Company]
ListDepartmentsByFilters
ListDepartmentsByFilters(filters: id, name,...)
List[Department]
ListCategoriesByFilters
ListCategoriesByFilters(filters: id, name,...)
List[Category]
ListSubcategoriesByFilters
ListSubcategoriesByFilters(filters: id, name,...)
List[Subcategory]
ListIncidentsByFilters
ListIncidentsByFilters(filters: id, name,...)
List[Incident]
ListIncidentComments
ListIncidentComments(incident_id)
List[Comment]
GetIncidentTasks
GetIncidentTasks(incident_id)
List[Task]
ListKBArticlesByFilters
ListKBArticlesByFilters(filters: id, name,...)
List[KnowledgeBase]
ListIncidentsByKB
ListIncidentsByKB(knowledge_base_id)
List[Incident]
ListSurveysByFilters
ListSurveysByFilters(filters: id, name,...)
List[Survey]
GetAverageCSAT
GetAverageCSAT(agent_id or incident_id)
{"average_rating": float}
ListLowRatedIncidents
ListLowRatedIncidents(threshold=None)
List[Incident]
CREATE / UPDATE / DELETE (11 APIs - 46%)
CreateKBArticle
CreateKBArticle(description, category_id, subcategory_id, created_by)
{"knowledge_base_id": str}
LinkIncidentToKB
LinkIncidentToKB(incident_id, knowledge_base_id)
{"success": bool}
UpdateKBArticle
UpdateKBArticle(knowledge_base_id, description)
{"knowledge_base_id": str}
CreateSurvey
CreateSurvey(incident_id, user_id, rating, feedback_text)
{"survey_id": str}
CreateIncidentTask
CreateIncidentTask(incident_id, description, assigned_to, priority, due_date)
{"task_id": str}
UpdateSurvey
UpdateSurvey(survey_id, rating, feedback_text)
{"survey_id": str}
UpdateIncident
UpdateIncident(incident_id, title, description, category_id, subcategory_id, assigned_to, department_id, status, priority)
{"incident_id": str}
UpdateTask
UpdateTask(task_id, description, assigned_to, status, priority, due_date)
{"task_id": str}
AddIncidentComment
AddIncidentComment(incident_id, user_id, comment_text, is_public)
{"incident_comment_id": str}
LogIncidentChange
LogIncidentChange(incident_id, changed_by)
{"incident_history_id": str}
UpdateUserProfile
UpdateUserProfile(user_id, first_name, last_name, email, role, timezone, status)
{"user_id": str}

# Example of a policy document:
# Airline Agent Policy

The current time is 2025-10-01 00:00:00 EST.

As an airline agent, you can help users book, modify, or cancel flight reservations.

- Before taking any actions that update the booking database (booking, modifying flights, editing baggage, upgrading cabin class, or updating passenger information), you must list the action details and obtain explicit user confirmation (yes) to proceed.

- You should not provide any information, knowledge, or procedures not provided by the user or available tools, or give subjective recommendations or comments.

- You should only make one tool call at a time, and if you make a tool call, you should not respond to the user simultaneously. If you respond to the user, you should not make a tool call at the same time.

- You should deny user requests that are against this policy.

- You should transfer the user to a human agent if and only if the request cannot be handled within the scope of your actions.

## Domain Basic

- Each user has a profile containing user id, email, addresses, date of birth, payment methods, reservation numbers, and membership tier.

- Each reservation has an reservation id, user id, trip type (one way, round trip), flights, passengers, payment methods, created time, baggages, and travel insurance information.

- Each flight has a flight number, an origin, destination, scheduled departure and arrival time (local time), and for each date:
  - If the status is "available", the flight has not taken off, available seats and prices are listed.
  - If the status is "delayed" or "on time", the flight has not taken off, cannot be booked.
  - If the status is "flying", the flight has taken off but not landed, cannot be booked.

## Book flight

- The agent must first obtain the user id, then ask for the trip type, origin, destination.

- Passengers: Each reservation can have at most five passengers. The agent needs to collect the first name, last name, and date of birth for each passenger. All passengers must fly the same flights in the same cabin.

- Payment: each reservation can use at most one travel certificate, at most one credit card, and at most three gift cards. The remaining amount of a travel certificate is not refundable. All payment methods must already be in user profile for safety reasons.

- Checked bag allowance: If the booking user is a regular member, 0 free checked bag for each basic economy passenger, 1 free checked bag for each economy passenger, and 2 free checked bags for each business passenger. If the booking user is a silver member, 1 free checked bag for each basic economy passenger, 2 free checked bag for each economy passenger, and 3 free checked bags for each business passenger. If the booking user is a gold member, 2 free checked bag for each basic economy passenger, 3 free checked bag for each economy passenger, and 3 free checked bags for each business passenger. Each extra baggage is 50 dollars.

- Travel insurance: the agent should ask if the user wants to buy the travel insurance, which is 30 dollars per passenger and enables full refund if the user needs to cancel the flight given health or weather reasons.

## Modify flight

- The agent must first obtain the user id and the reservation id.

- Change flights: Basic economy flights cannot be modified. Other reservations can be modified without changing the origin, destination, and trip type. Some flight segments can be kept, but their prices will not be updated based on the current price. The API does not check these for the agent, so the agent must make sure the rules apply before calling the API!

- Change cabin: all reservations, including basic economy, can change cabin without changing the flights. Cabin changes require the user to pay for the difference between their current cabin and the new cabin class. Cabin class must be the same across all the flights in the same reservation; changing cabin for just one flight segment is not possible.

- Change baggage and insurance: The user can add but not remove checked bags. The user cannot add insurance after initial booking.

- Change passengers: The user can modify passengers but cannot modify the number of passengers. This is something that even a human agent cannot assist with.

- Payment: If the flights are changed, the user needs to provide one gift card or credit card for payment or refund method. The agent should ask for the payment or refund method instead.

## Cancel flight

- The agent must first obtain the user id, the reservation id, and the reason for cancellation (change of plan, airline cancelled flight, or other reasons)

- All reservations can be cancelled within 24 hours of booking, or if the airline cancelled the flight. Otherwise, basic economy or economy flights can be cancelled only if travel insurance is bought and the condition is met, and business flights can always be cancelled. The rules are strict regardless of the membership status. The API does not check these for the agent, so the agent must make sure the rules apply before calling the API!

- The agent can only cancel the whole trip that is not flown. If any of the segments are already used, the agent cannot help and transfer is needed.

- The refund will go to original payment methods in 5 to 7 business days.

## Refund

- If the user is silver/gold member or has travel insurance or flies business, and complains about cancelled flights in a reservation, the agent can offer a certificate as a gesture after confirming the facts, with the amount being $100 times the number of passengers.

- If the user is silver/gold member or has travel insurance or flies business, and complains about delayed flights in a reservation and wants to change or cancel the reservation, the agent can offer a certificate as a gesture after confirming the facts and changing or cancelling the reservation, with the amount being $50 times the number of passengers.

- Do not proactively offer these unless the user complains about the situation and explicitly asks for some compensation. Do not compensate if the user is regular member and has no travel insurance and flies (basic) economy.


# Ecommerce agent policy

As an ecommerce agent, you can help users cancel or modify pending orders, return or exchange delivered orders, update their default user address, or provide information about their own profile, orders, and related products.

- At the beginning of the conversation, you have to authenticate the user identity by locating their user id via email. This has to be done even when the user already provides the user id.

- Once the user has been authenticated, you can provide the user with information about order, product, profile information, e.g. help the user look up order id.

- You can only help one user per conversation (but you can handle multiple requests from the same user), and must deny any requests for tasks related to any other user.

- Before taking consequential actions that update the database (cancel, modify, return, exchange), you have to list the action detail and obtain explicit user confirmation (yes) to proceed.

- You should not make up any information, knowledge, or procedures not provided from the user or the tools, or give subjective recommendations or comments.

- You should at most make one tool call at a time, and if you take a tool call, you should not respond to the user at the same time. If you respond to the user, you should not make a tool call.

- You should transfer the user to a human agent if and only if the request cannot be handled within the scope of your actions.

## Domain basic

- All times in the database are EST and 24 hour based. For example "02:30:00" means 2:30 AM EST.

- Each product has a unique product id, and each item has a unique item id. They have no relations and should not be confused.

- Each order can be in status 'Pending', 'Confirmed', 'Delivered', 'Shipped', or 'Cancelled'. Generally, you can only take action on pending or delivered orders.

- Exchange or modify order tools can only be called once. Be sure that all items to be changed are collected into a list before making the tool call!!!

## Cancel pending order

- An order can only be cancelled if its status is 'Pending', and you should check its status before taking the action.

- The user needs to confirm the order id and the reason (either 'no longer needed' or 'ordered by mistake') for cancellation.

- After user confirmation, the order status will be changed to 'Cancelled', and the total will be refunded via the original payment method immediately if it is a gift card, otherwise in 5 to 7 business days.

## Modify pending order

- An order can only be modified if its status is 'Pending', and you should check its status before taking the action.
- You should verify if the order belongs to the user before taking any action.
- For modifying the quantity of the pending order, just go ahead and modify the quantity of the item in the order, and the order status will be kept 'Pending'.

### Payment

- The user can only choose a single payment method different from the original payment method. Valid payment methods: ["Credit Card", "Debit Card", "PayPal", "Bank Transfer", "Cash"]

- After the payment of the order confirmed, the order status should be changed to 'Confirmed'.

### Shipping

- There are 2 types of Shipping methods: Standard and Express.
- The status of the shipping method can be either "Preparing", "In Transit", or "Delivered".
- After the shipping method of the order is confirmed, the order status should be changed from 'Confirmed' to 'Shipped'.
- When the shipping method changed from 'In Transit' to "Delivered", the order status should be changed from 'Shipped' to 'Delivered'.

### Delete
- A sales order can only be deleted if its status is 'Pending', and you should check its status before taking the action.
- A purchase order can only be deleted if its status is 'Pending', and you should check its status before taking the action.
